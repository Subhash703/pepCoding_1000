Question : 1
/****
Printing in incresing order

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        printDecreasing(n);
    }

    public static void printDecreasing(int n){
        if(n<1){
            return;
        }
        System.out.println(n);
        printDecreasing(n-1);
    }

}
***********/

Question 2 :
/*************
Printing In Incresing order
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        printDecreasing(n);
    }

    public static void printDecreasing(int n){
        if(n<1){
            return;
        }
        System.out.println(n);
        printDecreasing(n-1);
    }

}

************/
Question : 3
/*********
 You are required to print the counting from n to 1 and back to n again.
 
 import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        pdi(n);
    }

    public static void pdi(int n){
        if(n<1){
            return;
        }
        System.out.println(n);
        pdi(n-1);
        System.out.println(n);
    }

}
*********/
Question 4
/*********
You are required to calculate the factorial of the number. Don't change the signature of factorial function.
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println(factorial(n,1));
    }

    public static int factorial(int n,int res){
        if(n==0 || n==1){
            return res;
        }
        return factorial(n-1,res*n);
    }
}
*********/
Question 5:
/********
You are required to calculate x raised to the power n. Don't change the signature of power function
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int n = sc.nextInt();
        System.out.println(power(x,n,1));
    }

    public static int power(int x, int n,int res){
        if(n==0){
            return res;
        }
        return power(x,n-1,res*x);
    }

}
*********/
Question 6:
/********
You are required to calculate x raised to the power n. Don't change the signature of power function.
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int n = sc.nextInt();
        System.out.println(power(x,n,1));
    }

    public static int power(int x, int n,int res){
        if(n==0){
            return res;
        }
        return power(x,n-1,res*x);
    }
}
********/
Question : 7
/*******
1. Here are a few sets of inputs and outputs for your reference
Input1 -> 1
Output1 -> 1 1 1

Input2 -> 2
Output2 -> 2 1 1 1 2 1 1 1 2

Input2 -> 3
Output3 -> 3 2 1 1 1 2 1 1 1 2 3 2 1 1 1 2 1 1 1 2 3

2. Figure out the pattern and complete the recursive function pzz to achieve the above for any positive number n.

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        pzz(n);
    }

    public static void pzz(int n){
        if(n==0){
            return;
        }
        System.out.print(n+" ");
        pzz(n-1);
        System.out.print(n+" ");
        pzz(n-1);
        System.out.print(n+" ");
    }

}
********/
Question : 8
/*******
TOH
1. There are 3 towers. Tower 1 has n disks, where n is a positive number. Tower 2 and 3 are empty.
2. The disks are increasingly placed in terms of size such that the smallest disk is on top and largest disk is at bottom.
3. You are required to 
    3.1. Print the instructions to move the disks.
    3.2. from tower 1 to tower 2 using tower 3 
    3.3. following the rules
        3.3.1 move 1 disk at a time.
        3.3.2 never place a smaller disk under a larger disk.
        3.3.3 you can only move a disk at the top.

Solution :
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int id1 = sc.nextInt();
        int id2 = sc.nextInt();
        int id3 = sc.nextInt();
        toh(n,id1,id2,id3);
    }

    public static void toh(int n, int t1id, int t2id, int t3id){
        if(n==1){
            System.out.println(n+"["+t1id+" -> "+t2id+"]");
            return;
        }
        toh(n-1,t1id,t3id,t2id);
        System.out.println(n+"["+t1id+" -> "+t2id+"]");
        toh(n-1,t3id,t2id,t1id);
    }

}
/*
1[10 -> 11]
2[10 -> 12]
1[11 -> 12]
3[10 -> 11]
1[12 -> 10]
2[12 -> 11]
1[10 -> 11]


 Disk 1 moved from A to C
 Disk 2 moved from A to B
 Disk 1 moved from C to B
 Disk 3 moved from A to C
 Disk 1 moved from B to A
 Disk 2 moved from B to C
 Disk 1 moved from A to C

*/
********/
